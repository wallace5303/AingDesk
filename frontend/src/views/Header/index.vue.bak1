<template>
    <div class="header-wrapper" v-if="!activeKnowledge || (siderWidth == 0 && knowledgeSiderWidth == 0)">
        <div class="comunication-tit flex justify-between items-center">
            <div class="flex items-center">
                <i class="i-common:expand w-18 h-18 mr-10 cursor-pointer" v-if="isFold" @click="doExpand"></i>
            </div>
            <!-- modelList -->
            <div class="flex justify-start items-center gap-2.5">
                <span class="text-14px min-w-40px inline-block">{{ $t("模型") }}:</span>
                <n-dropdown trigger="hover" :options="modelList" @select="changeCurrentModel" key-field="value"
                    label-field="label" class="model-list-drop" scrollable>
                    <n-button icon-placement="right">
                        {{ showModel ? showModel : $t("请选择或安装接入模型") }}
                        <template #icon>
                            <i class="i-carbon:caret-down ml-5 "></i>
                        </template>
                    </n-button>
                </n-dropdown>
            </div>
        </div>
        <div class="right-tools">
            <n-button type="success" @click="shareShow = true">
                <template #icon><i class="i-common:share w-16 h-16"></i></template>
                {{ $t("分享") }}
            </n-button>
        </div>
    </div>
</template>

<script lang="tsx" setup>
import { get_model_list } from "@/views/Settings/controller"
import { changeCurrentModel,doExpand } from "@/views/Header/controller"
import { useI18n } from "vue-i18n";
import { computed, watch } from "vue";
import { getHeaderStoreData } from "./store";
import { getChatToolsStoreData } from "../ChatTools/store";
import { getSiderStoreData } from "../Sider/store";
import { getKnowledgeStoreData } from "../KnowleadgeStore/store";
import { getThirdPartyApiStoreData } from "../ThirdPartyApi/store";

const { t: $t } = useI18n()
const { currentSupplierName, } = getThirdPartyApiStoreData()
const { shareShow, modelList, currentModel, } = getHeaderStoreData()
const { chatMask } = getChatToolsStoreData()
const { isFold, siderWidth, } = getSiderStoreData()
const { activeKnowledge, knowledgeSiderWidth, } = getKnowledgeStoreData()

/**
 * @description 获取模型列表
 */
get_model_list()

/**
 * @description 从modelList中找出currentModel对应的label
 */
const showModel = computed(() => {
    return modelList.value.find((item: any) => (item.value === currentModel.value && item.supplierName == currentSupplierName.value))?.label
})

watch(showModel, (val) => {
    if (val) {
        chatMask.value = {
            status: false,
            notice: ""
        }
    } else {
        chatMask.value = {
            status: true,
            notice: $t("当前对话使用的模型已被禁用或删除，请重新启用或切换模型", [currentModel.value])
        }
    }
}, { immediate: true })


</script>

<style lang="scss">
.header-wrapper {
    height: 65px;
    display: flex;
    align-items: center;
    justify-content: space-between;

    .comunication-tit {
        font-size: 18px;
        // font-weight: bold;
    }

    .right-tools {
        display: flex;
        justify-content: space-between;
        align-items: center;
        gap: 10px;
        // min-width: 360px;
    }
}

.model-list-drop {
    max-height: 300px;
}
</style>